public boolean groupSum6(int start, int[] nums, int target) {
  if (start >= nums.length)
    return target == 0;
  return nums[start]== 6? groupSum6(start + 1,nums, target - nums [start]) : 
          groupSum6(start + 1,nums, target - nums [start])   ||
          groupSum6(start + 1, nums, target);
}

public boolean groupNoAdj(int start, int[] nums, int target) {
   if (start >= nums.length)
    return target == 0;
  return groupNoAdj(start + 2,nums, target - nums [start])   ||
          groupNoAdj(start + 1, nums, target);
}

public boolean groupSum5(int start, int[] nums, int target) {
  if (start >= nums.length)
    return target == 0;
  if (start < nums.length - 1 && nums[start]%5 == 0 )
    if (nums[start+1]== 1)
      return groupSum5(start + 2,nums, target - nums [start]);
  return nums[start]%5 == 0? 
        groupSum5(start + 1,nums, target - nums [start]) :
          groupSum5(start + 1,nums, target - nums [start])   ||
          groupSum5(start + 1, nums, target);
}

public boolean groupSumClump(int start, int[] nums, int target) {
   if(start >= nums.length)
        return target == 0;
    int i;
    int sum = 0;
    for(i = start; i < nums.length && nums[start] == nums[i]; i++)
        sum += nums[i];
    if(groupSumClump(i, nums, target - sum))
        return true;
    if(groupSumClump(i, nums, target))
        return true;

    return false;
}

public boolean splitArray(int[] nums) {
  return splitArray(nums, 0, 0, nums.length);
}

public boolean splitArray(int[] nums,int x, int y, int len) {
  if (len<=0)
    return x==y;
  return splitArray(nums,x+nums[len-1],y,len-1) || 
        splitArray(nums,x,y+nums[len-1],len-1);
}
