import java.util.*;

public class Sorts
{
    static void insertionSort(int arr[], int n)  
    {  
        int i, key, j;  
        for (i = 1; i < n; i++) 
        {  
            key = arr[i];  
            j = i - 1;  
            while (j >= 0 && arr[j] > key) 
            {  
                arr[j + 1] = arr[j];  
                j = j - 1;  
            }  
            arr[j + 1] = key;  
        }  
    } 

    
    public static void mergeSort(int[] a, int n) {
    if (n < 2) {
        return;
    }
    int mid = n / 2;
    int[] l = new int[mid];
    int[] r = new int[n - mid];
 
    for (int i = 0; i < mid; i++) {
        l[i] = a[i];
    }
    for (int i = mid; i < n; i++) {
        r[i - mid] = a[i];
    }
    mergeSort(l, mid);
    mergeSort(r, n - mid);
 
    merge(a, l, r, mid, n - mid);
}
public static void merge(
  int[] a, int[] l, int[] r, int left, int right) {
  
    int i = 0, j = 0, k = 0;
    while (i < left && j < right) {
        if (l[i] <= r[j]) {
            a[k++] = l[i++];
        }
        else {
            a[k++] = r[j++];
        }
    }
    while (i < left) {
        a[k++] = l[i++];
    }
    while (j < right) {
        a[k++] = r[j++];
    }
}


    public static int[] arrayCreator(int n){
        int[] nums = new int[n*10000000];
        for(int i=0; i< nums.length; i++){
            nums[i] = 5000-i;
        }
        return nums;
    }

    public static void tomarTiempos1(){
        for(int i=1; i<=20; i++){
            int nums[] = arrayCreator(i);
            int size = nums.length;
            long start = System.currentTimeMillis();
            insertionSort(nums, size);
            System.out.println(System.currentTimeMillis() - start);
        }
    }

    public static void tomarTiempos2(){
        for(int i=1; i<=20; i++){
            int nums[] = arrayCreator(i);
            int size = nums.length;
            long start = System.currentTimeMillis();
            mergeSort(nums, size);
            System.out.println((long)System.currentTimeMillis() - start);
        }
    }
}
