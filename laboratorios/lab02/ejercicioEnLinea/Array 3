public class Array3
{
    public int maxSpan(int[] nums) {
    int max = 0;
    int cant;
    if((nums.length == 1)||(nums.length == 2 && nums[0] != nums[1])){
      return 1;
    }
    for(int i = 0; i < nums.length; i++)
    {
        for(int j = nums.length - 1; j > i; j--){
          if(nums[j]!=nums[i]){
            continue;
          }
          cant = j+1 - i;
          if(cant > max)
              max = cant;
        }
    }
    return max;
}

public int[] fix34(int[] nums) {
  for (int x = 1; x < nums.length; x ++){
    if (nums [x-1] == 3 && nums [x]!= 4){
      for (int y = 0; y < nums.length; y ++)
        if (nums[y] == 4 && nums [y-1] != 3){
          int temp = nums [x];
          nums [x] = 4;
          nums [y] = temp;
        }
    }
  }
  return nums;
}

public int[] fix45(int[] nums) {
 int j = 0;
    for(int i = 0; i < nums.length - 1; i++)
    {
        if(nums[i] == 4 && nums[i+1] != 5)
        {
            for(; !(nums[j] == 5 && (j == 0 || j > 0 && nums[j-1] != 4)); j++);
            nums[j] = nums[i+1];
            nums[i+1] = 5;
        }
    }
    return nums;
    //taken from:https://github.com/ozelentok/CodingBat-Solutions/blob/master/Java/Array-3.java
}

public boolean canBalance(int[] nums) {
  int izquierda = 0;
  int derecha = nums[nums.length-1];
  if(nums.length==2 && (nums[0] == nums[1])){
    return true;
  }
  for(int i=0; i<nums.length-1; i++){
    izquierda+=nums[i];
  }
  for(int i=nums.length-2; i>0; i--){
    if(izquierda == derecha){
            return true;
    }
        izquierda -= nums[i];
        derecha += nums[i];
  }
  return false;
}

public boolean linearIn(int[] outer, int[] inner) {
  boolean n;
  for(int inN = 0, outN = 0; inN < inner.length; inN++)
  {
      n = true;
      for(; outN < outer.length && n; outN++)
      {
          if(inner[inN] == outer[outN])
              n = false;
      }
      if(n)
          return false;
  }
  return true;
}
//taken from https://github.com/ozelentok/CodingBat-Solutions/blob/master/Java/Array-3.java

}
